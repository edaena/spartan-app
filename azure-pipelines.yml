# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master
- DEPLOY/*
- deploy/*

# Don't run against PRs
pr: none

variables:
- name: APP_NAME
  value: go-docker-k8s-demo
- group: Container Journey
- group: Spartan CI Variables

stages:
- stage: build
  jobs:
  - job: "run_build_push_acr"
    pool:
      vmImage: 'Ubuntu 16.04'
    variables:
      GOBIN:  '$(GOPATH)/bin' # Go binaries path
      GOROOT: '/usr/local/go1.11' # Go installation path
      GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
      modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code
    steps:
    - script: |
        mkdir -p '$(GOBIN)'
        mkdir -p '$(GOPATH)/pkg'
        mkdir -p '$(modulePath)'
        shopt -s extglob
        shopt -s dotglob
        mv !(gopath) '$(modulePath)'
        echo '##vso[task.prependpath]$(GOBIN)'
        echo '##vso[task.prependpath]$(GOROOT)/bin'
      displayName: 'Set up the Go workspace'
    
    - script: |
        mkdir -p '$(GOBIN)'
        mkdir -p '$(GOPATH)/pkg'
        mkdir -p '$(modulePath)'
        shopt -s extglob
        shopt -s dotglob
        mv !(gopath) '$(modulePath)'
        echo '##vso[task.prependpath]$(GOBIN)'
        echo '##vso[task.prependpath]$(GOROOT)/bin'
      displayName: 'Set up the Go workspace'

    #- script: |
    #    # Login to Azure 
    #    echo "az login --service-principal --username $(SP_APP_ID) --password $(SP_PASS) --tenant $(SP_TENANT)"
    #    az login --service-principal --username "$(SP_APP_ID)" --password "$(SP_PASS)" --tenant "$(SP_TENANT)"
    #  workingDirectory: '$(modulePath)'
    #  displayName: 'Azure Login'

    #- script: |
    #    # go version
    #    # # Login to Azure 
    #    # echo "az login --service-principal --username $(SP_APP_ID) --password $(SP_PASS) --tenant $(SP_TENANT)"
    #    # az login --service-principal --username "$(SP_APP_ID)" --password "$(SP_PASS)" --tenant "$(SP_TENANT)"
    #    # Use ACR build task to build and push
    #    echo "az acr build -r $(ACR_NAME) --image $(Build.Repository.Name):$(build.BuildNumber) ."
    #    az acr build -r $(ACR_NAME) --image $(Build.Repository.Name):$(build.BuildNumber) .
    #  workingDirectory: '$(modulePath)'
    #  displayName: 'ACR Build and Publish'

    - script: |
        ls
      displayName: 'print dir'
      workingDirectory: '$(modulePath)'

    - bash: |
        curl $SCRIPT > script.sh
        chmod +x ./script.sh
        tag_name="$(Build.Repository.Name):$(build.BuildNumber)"
        commitId=$(Build.SourceVersion)
        commitId=$(echo "${commitId:0:7}")
        echo "./script.sh $(ACCOUNT_NAME) $(ACCOUNT_KEY) $(TABLE_NAME) $(PARTITION_KEY) p1 $(Build.BuildId) imageTag $tag_name commitId $commitId service $(Build.Repository.Name)"
        ./script.sh $(ACCOUNT_NAME) $(ACCOUNT_KEY) $(TABLE_NAME) $(PARTITION_KEY) p1 $(Build.BuildId) imageTag $tag_name commitId $commitId service $(Build.Repository.Name)
      displayName: Update manifest pipeline details in CJ db
      env:
        SCRIPT: https://raw.githubusercontent.com/samiyaakhtar/spk/686-simply-pipelines/scripts/update_introspection.sh
    
    # - task: Docker@2
    #   inputs:
    #     containerRegistry: 'hellorings_acr'
    #     repository: '$(Build.Repository.Name)'
    #     command: 'buildAndPush'
    #     Dockerfile: '**/Dockerfile'
    #     tags: '$(build.BuildNumber)'
    #     workingDirectory:  '$(modulePath)'

    - script: |
        echo "some data for the file" >> $(System.DefaultWorkingDirectory)/my_artifact.txt
      displayName: 'Write out file'
      
    - task: PublishPipelineArtifact@1
      inputs:
        path: $(System.DefaultWorkingDirectory)/my_artifact.txt
        artifact: my_artifact




- stage: hld_update
  dependsOn: build
  condition: and(succeeded('build'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/DEPLOY/'),eq(variables['Build.SourceBranchName'],'master')))
  jobs:
  - job: update_image_tag
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
    - script: |
        # Download build.sh
        curl https://raw.githubusercontent.com/Microsoft/bedrock/master/gitops/azure-devops/build.sh > build.sh
        chmod +x ./build.sh
        
        curl https://raw.githubusercontent.com/Microsoft/bedrock/master/gitops/azure-devops/release.sh > release.sh
        chmod +x ./release.sh

        . release.sh

        latest_commit=$(git rev-parse --short HEAD)
        echo "latest_commit=$latest_commit"

        # Download update storage script
        curl https://raw.githubusercontent.com/samiyaakhtar/spk/686-simply-pipelines/scripts/update_introspection.sh > script.sh
        chmod +x script.sh
        ./script.sh $(ACCOUNT_NAME) $(ACCOUNT_KEY) $(TABLE_NAME) $(PARTITION_KEY) imageTag "$(Build.Repository.Name):$(build.BuildNumber)" p2 $(Build.BuildId) hldCommitId $latest_commit env "DEV"
      env:
        GITHUB_TOKEN_VAR: $(GITHUB_TOKEN)
        REPO: https://github.com/edaena/fabrikate-spartan-cluster.git
        ACCESS_TOKEN_SECRET: $(ACCESS_TOKEN)



