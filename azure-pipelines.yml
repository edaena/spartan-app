# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master
- DEPLOY/*
- deploy/*

# Don't run against PRs
pr: none

variables:
- name: APP_NAME
  value: go-docker-k8s-demo
- group: Container Journey
- group: 'CI Variables'

stages:
- stage: build
  jobs:
  - job: "run_build_push_acr"
    pool:
      vmImage: 'Ubuntu 16.04'
    variables:
      GOBIN:  '$(GOPATH)/bin' # Go binaries path
      GOROOT: '/usr/local/go1.11' # Go installation path
      GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
      modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code
    steps:
    - script: |
        mkdir -p '$(GOBIN)'
        mkdir -p '$(GOPATH)/pkg'
        mkdir -p '$(modulePath)'
        shopt -s extglob
        shopt -s dotglob
        mv !(gopath) '$(modulePath)'
        echo '##vso[task.prependpath]$(GOBIN)'
        echo '##vso[task.prependpath]$(GOROOT)/bin'
      displayName: 'Set up the Go workspace'
    
    - script: |
        mkdir -p '$(GOBIN)'
        mkdir -p '$(GOPATH)/pkg'
        mkdir -p '$(modulePath)'
        shopt -s extglob
        shopt -s dotglob
        mv !(gopath) '$(modulePath)'
        echo '##vso[task.prependpath]$(GOBIN)'
        echo '##vso[task.prependpath]$(GOROOT)/bin'
      displayName: 'Set up the Go workspace'

    - script: |
        # Login to Azure 
        echo "az login --service-principal --username $(SP_APP_ID) --password $(SP_PASS) --tenant $(SP_TENANT)"
        az login --service-principal --username "$(SP_APP_ID)" --password "$(SP_PASS)" --tenant "$(SP_TENANT)"
      workingDirectory: '$(modulePath)'
      displayName: 'Azure Login'

    - script: |
        # go version
        # # Login to Azure 
        # echo "az login --service-principal --username $(SP_APP_ID) --password $(SP_PASS) --tenant $(SP_TENANT)"
        # az login --service-principal --username "$(SP_APP_ID)" --password "$(SP_PASS)" --tenant "$(SP_TENANT)"
        # Use ACR build task to build and push
        echo "az acr build -r $(ACR_NAME) --image $(Build.Repository.Name):$(build.BuildNumber) ."
        az acr build -r $(ACR_NAME) --image $(Build.Repository.Name):$(build.BuildNumber) .
      workingDirectory: '$(modulePath)'
      displayName: 'ACR Build and Publish'
      
    - bash: |
        curl $SCRIPT > script.sh
        chmod +x ./script.sh
        tag_name="$(Build.Repository.Name):$(build.BuildNumber)"
        commitId=$(Build.SourceVersion)
        commitId=$(echo "${commitId:0:7}")
        echo "./script.sh $(ACCOUNT_NAME) $(ACCOUNT_KEY) $(TABLE_NAME) $(PARTITION_KEY) p1 $(Build.BuildId) imageTag $tag_name commitId $commitId service $(Build.Repository.Name)"
        ./script.sh $(ACCOUNT_NAME) $(ACCOUNT_KEY) $(TABLE_NAME) $(PARTITION_KEY) p1 $(Build.BuildId) imageTag $tag_name commitId $commitId service $(Build.Repository.Name)
      displayName: Update manifest pipeline details in CJ db
      env:
        SCRIPT: https://raw.githubusercontent.com/samiyaakhtar/spk/686-simply-pipelines/scripts/update_introspection.sh
    
    - script: |
        echo "some data for the file" >> $(System.DefaultWorkingDirectory)/my_artifact.txt
      displayName: 'Write out file'
      
    - task: PublishPipelineArtifact@1
      inputs:
        path: $(System.DefaultWorkingDirectory)/my_artifact.txt
        artifact: my_artifact
    

- stage: post_build
  dependsOn: build
  jobs:
  - job: update_image_tag
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
    - script: |
       echo "update hld"
      displayName: "Post build step"
